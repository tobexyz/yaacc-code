import org.ajoberstar.grgit.*

buildscript {
        dependencies {
            classpath 'org.ajoberstar:gradle-git:1.7.2'
            classpath "gradle.plugin.com.github.dkorotych.gradle.maven.exec:gradle-maven-exec-plugin:2.2.1"
        }
    }

apply plugin: "com.github.dkorotych.gradle-maven-exec"


def clingVersion='2.1.2.yaacc_2'
def seamlessVersion='1.1.2.yaacc_1'

configurations {
  build
}

task cloneSeamlessRepo{
    File dir=new File("$projectDir/build/poms/seamless")
    String gitRepo='https://github.com/tobexyz/seamless.git'
    def Grgit grgit
    if(!dir.exists()) {
        grgit = Grgit.clone(dir: dir, uri: gitRepo)

    }else{
       grgit = Grgit.open(dir.toString())
    }
    if(grgit.tag.list().find { it.name == seamlessVersion }){
        grgit.checkout(branch: seamlessVersion)
    } else {
        grgit.checkout(branch: 'local_build', startPoint: 'origin/yaacc_build', createBranch: true, orphan: true)
        grgit.pull()
    }


}


task copyReactorPom(type: Copy)  {
    from ("${projectDir}/"){
       include 'reactor-pom.xml'
    }
    into "${projectDir}/build/poms"
    rename ('reactor-pom.xml', 'pom.xml')

}



task cloneClingRepo{
    File dir=new File("$projectDir/build/poms/tobexyz-cling")
    String gitRepo='https://github.com/tobexyz/cling.git'
    def Grgit grgit
    if(!dir.exists()) {
        grgit = Grgit.clone(dir: dir, uri: gitRepo)

    }else{
        grgit = Grgit.open(dir.toString())
    }
    if(grgit.tag.list().find { it.name == clingVersion }){
        grgit.checkout(branch: clingVersion)
    } else {
        try{
            grgit.checkout(branch: 'local_build', startPoint: 'origin/yaacc_build', createBranch: true, orphan: true)
        }catch (Exception e){
            //Ignore branch already exist
        }

        grgit.pull()
    }


}


task build(type: MavenExec) {

    workingDir "${projectDir}/build/poms/"
    goals 'clean', 'install'
}




build.dependsOn(copyReactorPom)
build.dependsOn(cloneSeamlessRepo)
build.dependsOn(cloneClingRepo)


